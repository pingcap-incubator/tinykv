syntax = "proto3";
package kvrpcpb;

import "metapb.proto";
import "errorpb.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option java_package = "org.tikv.kvproto";

message LockInfo {
    bytes primary_lock = 1;
    uint64 lock_version = 2;
    bytes key = 3;
    uint64 lock_ttl = 4;
}

message AlreadyExist {
    bytes key = 1;
}

message KeyError {
    LockInfo locked = 1; // Client should backoff or cleanup the lock then retry.
    string retryable = 2; // Client may restart the txn. e.g write conflict.
    string abort = 3; // Client should abort the txn.
    WriteConflict conflict = 4; // Write conflict is moved from retryable to here.
}

message WriteConflict {
    uint64 start_ts = 1;
    uint64 conflict_ts = 2;
    bytes key = 3;
    bytes primary = 4;
}

message Context {
    uint64 region_id = 1;
    metapb.RegionEpoch region_epoch = 2;
    metapb.Peer peer = 3;
    uint64 term = 5;
}

message HandleTime {
    int64 wait_ms = 1; // time in queue
    int64 process_ms = 2; // process time without wait time.
}

message ScanInfo {
    int64 total = 1; // total count
    int64 processed = 2; // processed count
}

message ScanDetail {
    ScanInfo write = 1;
    ScanInfo lock = 2;
    ScanInfo data = 3;
}

message ExecDetails {
    HandleTime handle_time = 1;// set when ctx.handle_time = true or meet slow query
    ScanDetail scan_detail = 2;// set when ctx.scan_detail = true or meet slow query
}

message GetRequest {
    Context context = 1;
    bytes key = 2;
    uint64 version = 3;
}

message GetResponse {
    errorpb.Error region_error = 1;
    KeyError error = 2;
    bytes value = 3;
    bool not_found = 4;
}

message ScanRequest {
    Context context = 1;
    bytes start_key = 2;
    uint32 limit = 3;
    uint64 version = 4;
}

message KvPair {
    KeyError error = 1;
    bytes key = 2;
    bytes value = 3;
}

message ScanResponse {
    errorpb.Error region_error = 1;
    repeated KvPair pairs = 2;
}

enum Op {
    Put = 0;
    Del = 1;
    Rollback = 2;
}

message Mutation {
    Op op = 1;
    bytes key = 2;
    bytes value = 3;
}

message PrewriteRequest {
    Context context = 1;
    repeated Mutation mutations = 2;
    // primary_lock_key
    bytes primary_lock = 3;
    uint64 start_version = 4;
    uint64 lock_ttl = 5;
}

message PrewriteResponse {
    errorpb.Error region_error = 1;
    repeated KeyError errors = 2;
}

message CommitRequest {
    Context context = 1;
    uint64 start_version = 2;
    repeated bytes keys = 3;
    uint64 commit_version = 4;
}

message CommitResponse {
    errorpb.Error region_error = 1;
    KeyError error = 2;
}

message BatchRollbackRequest {
    Context context = 1;
    uint64 start_version = 2;
    repeated bytes keys = 3;
}

message BatchRollbackResponse {
    errorpb.Error region_error = 1;
    KeyError error = 2;
}

// CheckTxnStatusRequest checks the status of a transaction.
// If the transaction is rollbacked/committed, return the result;
// If the TTL of the transaction is exhausted, abort that transaction and return rolledback;
// Otherwise, returns the TTL information.
message CheckTxnStatusRequest {
    Context context = 1;
    bytes primary_key = 2;
    uint64 lock_ts = 3;	// primary key and lock ts together to locate the primary lock of a transaction.
    uint64 current_ts = 4; // current_ts is used to check TTL timeout, it may be inaccurate.
}

enum Action {
    NoAction = 0;
    TTLExpireRollback = 1;
    LockNotExistRollback = 2;
}

message CheckTxnStatusResponse {
    errorpb.Error region_error = 1;
    // Three kinds of txn status:
    // locked: lock_ttl > 0
    // committed: commit_version > 0
    // rolled back: lock_ttl = 0 && commit_version = 0
    uint64 lock_ttl = 2;
    uint64 commit_version = 3;
    // The action performed by the CheckTxnStatus
    // If the action is rollback, set the rollback reason.
    Action action = 4;
}

message ResolveLockRequest {
    Context context = 1;
    uint64 start_version  = 2;
    // If the txn is rolled back, do not set it.
    uint64 commit_version = 3;
}

message ResolveLockResponse {
    errorpb.Error region_error = 1;
    KeyError error = 2;
}

message RawGetRequest {
    Context context = 1;
    bytes key = 2;
    string cf = 3;
}

message RawGetResponse {
    errorpb.Error region_error = 1;
    string error = 2;
    bytes value = 3;
    bool not_found = 4;
}

message RawPutRequest {
    Context context = 1;
    bytes key = 2;
    bytes value = 3;
    string cf = 4;
}

message RawPutResponse {
    errorpb.Error region_error = 1;
    string error = 2;
}

message RawDeleteRequest {
    Context context = 1;
    bytes key = 2;
    string cf = 3;
}

message RawDeleteResponse {
    errorpb.Error region_error = 1;
    string error = 2;
}

message RawScanRequest {
    Context context = 1;
    bytes start_key = 2;
    uint32 limit = 3;
    string cf = 4;

}

message RawScanResponse {
    errorpb.Error region_error = 1;
    string error = 2;
    repeated KvPair kvs = 3;
}

message KeyRange {
  bytes start_key = 1;
  bytes end_key = 2;
}
